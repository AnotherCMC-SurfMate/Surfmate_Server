plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

group = 'cmc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly{
		extendsFrom annotationProcessor
	}
}

jacoco {
	toolVersion = '0.8.8'
}

jacocoTestReport {

	dependsOn test
	reports {
		// 원하는 리포트를 켜고 끌 수 있습니다.
		html.enabled true
		xml.enabled false
		csv.enabled false

		html.destination file("src/jacoco/jacoco.html")
	}


	def Qdomains = []
	for (qPattern in '**/QA'..'**/QZ') {
		Qdomains.add(qPattern + '*')
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
			fileTree(dir: it,
					excludes: [
							"**/*Application*",
							'**/*Request*',
							'**/*Response*',
							'**/*Dto*',
							'**/*Config*',
							'**/*Exception*',
							'**/*Configuration*',
							'**/*Exception*'
					] + Qdomains)
		}))
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = []
	for (qPattern in '*.QA'..'*.QZ') {
		Qdomains.add(qPattern + '*')
	}
	// 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'CLASS'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
			excludes = [
					'*.test.*',
					'**.*Application*',
					'Q*.class',
					'**.*Config*',
					'**.*Request*',
					'**.*Response*',
					'**.*Exception*',
					'**.*Configuration*',
					'**.*Dto*',
					'**.*Exception*'
			] + Qdomains
		}
	}
}

repositories {
	mavenCentral()
}

//ext {
//	set('springCloudVersion', "2022.0.0")
//}

dependencies {

	// Security
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'
	// DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.1'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.flywaydb:flyway-mysql:9.14.1'

	runtimeOnly 'com.h2database:h2'
    // FCM
	implementation 'com.google.firebase:firebase-admin:7.1.1'

	// QueryDSL
	// springboot 3.0 javax -> jakarta 변경 사항
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// MVC
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
//	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.0'

	// Swagger UI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.tngtech.archunit:archunit-junit5:0.17.0'
}

//dependencyManagement {
//	imports {
//		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//	}
//}

tasks.named('test') {
	useJUnitPlatform()

}

